Bacon = require \baconjs
https = require \https
zlib = require \zlib

options =
  host: \api.4chan.org
  headers:
    'User-Agent'      : 'Fountain/0.0.0'
    'Accept-Encoding' : 'gzip, deflate'
    'Accept'          : 'application/json'

events = Bacon.from-event-target

function once target event
  events target, event .take 1

function as-error => new Bacon.Error it

function decode-content res
  if /gzip|deflate/.test res.headers['content-encoding']
    res.pipe zlib.createUnzip!
  else
    res

function slurp node-stream
  node-stream.set-encoding \utf-8 # decode bytes as string

  events node-stream, \data
    .take-until events node-stream, \end
    .reduce "" (a, b) -> a + b

function send-request path
  req = https.get options <<< {path}
  
  Bacon.merge-all
    once req, \error .map as-error
    once req, \response .flat-map (res) ->
      Bacon.combine-template {
        body: slurp decode-content res .map JSON.parse
        res.status-code
        res.headers
      }

# reverse comp
function pmoc a, b => -> a b ...

export
  catalog = pmoc send-request, (board) -> "#board/catalog.json"
  thread = pmoc send-request, (board, thread) -> "#board/res/#thread.json"

